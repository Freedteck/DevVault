import { useState, useContext } from 'react';
import { Bot, Sparkles, Loader2 } from 'lucide-react';
import PropTypes from 'prop-types';
import styles from './AIAssistant.module.css';
import Button from '../button/Button';
import { userWalletContext } from '../../context/userWalletContext';
import llmService from '../../services/llmService';
import analyticsService from '../../services/analyticsService';

const AIAssistant = ({ question, context = [] }) => {
  const [aiAnswer, setAiAnswer] = useState('');
  const [isGenerating, setIsGenerating] = useState(false);
  const [showSuggestions, setShowSuggestions] = useState(false);
  const [suggestions, setSuggestions] = useState([]);
  const { accountId, walletData } = useContext(userWalletContext);

  const generateAIAnswer = async () => {
    if (!question) return;
    
    setIsGenerating(true);
    try {
      const answer = await llmService.generateAnswer(question, context);
      setAiAnswer(answer);
      
      // Track AI usage
      await analyticsService.trackEvent('ai_answer_generated', {
        question: question.substring(0, 100),
        hasContext: context.length > 0
      }, walletData, accountId);
      
    } catch (error) {
      console.error('Error generating AI answer:', error);
      setAiAnswer('Sorry, I encountered an error while generating an answer. Please try again.');
    } finally {
      setIsGenerating(false);
    }
  };

  const generateSuggestions = async () => {
    if (!question) return;
    
    try {
      const similarQuestions = await llmService.suggestSimilarQuestions(question);
      setSuggestions(similarQuestions);
      setShowSuggestions(true);
    } catch (error) {
      console.error('Error generating suggestions:', error);
    }
  };

  return (
    <div className={styles.aiAssistant}>
      <div className={styles.header}>
        <div className={styles.title}>
          <Bot className={styles.icon} />
          <h3>AI Assistant</h3>
          <Sparkles className={styles.sparkle} />
        </div>
        <p>Get instant AI-powered answers based on DevVault's knowledge base</p>
      </div>

      <div className={styles.actions}>
        <Button 
          text={isGenerating ? "Generating..." : "Get AI Answer"} 
          handleClick={generateAIAnswer}
          btnClass={isGenerating ? "secondary" : "primary"}
        />
        <Button 
          text="Similar Questions" 
          handleClick={generateSuggestions}
          btnClass="secondary"
        />
      </div>

      {isGenerating && (
        <div className={styles.loading}>
          <Loader2 className={styles.spinner} />
          <p>AI is analyzing the question and generating an answer...</p>
        </div>
      )}

      {aiAnswer && (
        <div className={styles.answer}>
          <h4>AI Generated Answer:</h4>
          <div className={styles.content}>
            {aiAnswer}
          </div>
          <div className={styles.disclaimer}>
            <small>
              ⚠️ This answer was generated by AI. Please verify the information and consider getting human feedback.
            </small>
          </div>
        </div>
      )}

      {showSuggestions && suggestions.length > 0 && (
        <div className={styles.suggestions}>
          <h4>Related Questions:</h4>
          <ul>
            {suggestions.map((suggestion, index) => (
              <li key={index}>{suggestion}</li>
            ))}
          </ul>
        </div>
      )}
    </div>
  );
};

AIAssistant.propTypes = {
  question: PropTypes.string,
  context: PropTypes.array
};

export default AIAssistant;